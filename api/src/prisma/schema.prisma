// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String        @id @default(uuid()) @db.Uuid
  email            String        @unique @db.VarChar(50)
  password         String        @db.VarChar(255)
  telephone        String        @db.VarChar(16)
  confirmationCode Int
  createdAt        DateTime      @default(now())
  confirmedAt      DateTime?
  deletedAt        DateTime?
  domains          DomainUsers[]

  @@map("users")
}

model Domain {
  id                     String                  @id @default(uuid()) @db.Uuid
  url                    String                  @unique @db.VarChar(50)
  companyName            String?                 @unique @db.VarChar(100)
  createdAt              DateTime                @default(now())
  verifiedAt             DateTime?
  deletedAt              DateTime?
  users                  DomainUsers[]
  domainHostingEmissions DomainHostingEmission[]
  pages                  Page[]
  badge                  Badge?
  offsets                Offset[]
  subscriptions          Subscription[]

  @@map("domains")
}

model DomainUsers {
  domain    Domain    @relation(fields: [domainId], references: [id])
  domainId  String    @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.Uuid
  role      Role      @default(MANAGER)
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@id([domainId, userId])
  @@map("domain_users")
}

model DomainHostingEmission {
  id           String   @id @default(uuid()) @db.Uuid
  domain       Domain   @relation(fields: [domainId], references: [id])
  domainId     String   @db.Uuid
  greenHosting Boolean
  createdAt    DateTime @default(now())

  @@map("domain_hosting_emissions")
}

model Page {
  id                String             @id @default(uuid()) @db.Uuid
  domain            Domain             @relation(fields: [domainId], references: [id])
  domainId          String             @db.Uuid
  url               String             @unique @db.VarChar(500)
  createdAt         DateTime           @default(now())
  pageViewEmissions PageViewEmission[]
  pageViews         PageViews[]

  @@map("pages")
}

model PageViewEmission {
  id               String      @id @default(uuid()) @db.Uuid
  Page             Page        @relation(fields: [pageId], references: [id])
  pageId           String      @db.Uuid
  // FIXME: The following 4 lines are bullshit... refactor and check out ecoping therefore
  emissionAmount   Int
  fileSize         Int
  internalRequests Int
  externalRequests Int
  createdAt        DateTime    @default(now())
  pageViews        PageViews[]

  @@map("page_view_emissions")
}

model PageViews {
  page               Page             @relation(fields: [pageId], references: [id])
  pageId             String           @db.Uuid
  pageViewEmission   PageViewEmission @relation(fields: [pageViewEmissionId], references: [id])
  pageViewEmissionId String           @db.Uuid
  createdAt          DateTime         @default(now())

  @@id([pageId, pageViewEmissionId])
  @@map("page_views")
}

model Badge {
  id          String           @id @default(uuid()) @db.Uuid
  domain      Domain           @relation(fields: [domainId], references: [id])
  domainId    String           @db.Uuid
  colorscheme BadgeColorscheme @default(COLOR)
  type        BadgeType        @default(HORIZONTAL)

  @@map("badges")
}

model Offset {
  id             String       @id @default(uuid()) @db.Uuid
  domain         Domain       @relation(fields: [domainId], references: [id])
  domainId       String       @db.Uuid
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String       @db.Uuid
  offsetType     OffsetType
  emissionAmount Int
  price          Int
  createdAt      DateTime     @default(now())

  @@map("offsets")
}

model Subscription {
  id                   String          @id @default(uuid()) @db.Uuid
  domain               Domain          @relation(fields: [domainId], references: [id])
  domainId             String          @db.Uuid
  paymentInterval      PaymentInterval @default(MONTHLY)
  stripeCustomerId     String          @db.VarChar(50)
  stripePriceId        String          @db.VarChar(50)
  stripeSubscriptionId String          @db.VarChar(50)
  createdAt            DateTime        @default(now())
  validTo              DateTime // @default(now() + month or year)
  deletedAt            DateTime?
  offsets              Offset[]

  @@map("subscriptions")
}

enum Role {
  OWNER
  MANAGER
}

enum OffsetType {
  TREE
  OFFSET
}

enum BadgeType {
  HORIZONTAL
  VERTICAL
}

enum BadgeColorscheme {
  COLOR
  COLOR_INVERTED
  SW
  SW_INVERTED
}

enum PaymentInterval {
  MONTHLY
  YEARLY
}
