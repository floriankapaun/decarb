// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String       @id @default(uuid()) @db.Uuid
  email              String       @unique @db.VarChar(50)
  verificationCode   Int          @map("verification_code")
  password           String?      @db.VarChar(255)
  telephone          String?      @db.VarChar(35)
  refreshToken       String?      @unique @map("refresh_token") @db.Uuid
  refreshTokenExpiry DateTime?    @map("refresh_token_expiry")
  createdAt          DateTime     @default(now()) @map("created_at")
  verifiedAt         DateTime?    @map("verified_at")
  deletedAt          DateTime?    @map("deleted_at")
  domains            DomainUser[]

  @@map("users")
}

model Domain {
  id                        String                  @id @default(uuid()) @db.Uuid
  url                       String                  @unique @db.VarChar(50)
  companyName               String?                 @map("company_name") @db.VarChar(100)
  estimatedMonthlyPageViews Int                     @default(10000) @map("estimated_monthly_page_views")
  createdAt                 DateTime                @default(now()) @map("created_at")
  verifiedAt                DateTime?               @map("verified_at")
  deletedAt                 DateTime?               @map("deleted_at")
  users                     DomainUser[]
  domainHostingEmissions    DomainHostingEmission[]
  pages                     Page[]
  badge                     Badge?
  offsets                   Offset[]
  subscriptions             Subscription[]

  @@map("domains")
}

model DomainUser {
  domain    Domain    @relation(fields: [domainId], references: [id])
  domainId  String    @map("domain_id") @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id") @db.Uuid
  role      Role      @default(MANAGER)
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@id([domainId, userId])
  @@map("domain_users")
}

model DomainHostingEmission {
  id              String   @id @default(uuid()) @db.Uuid
  domain          Domain   @relation(fields: [domainId], references: [id])
  domainId        String   @map("domain_id") @db.Uuid
  renewableEnergy Boolean  @map("renewable_energy")
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("domain_hosting_emissions")
}

model Page {
  id                String             @id @default(uuid()) @db.Uuid
  domain            Domain             @relation(fields: [domainId], references: [id])
  domainId          String             @map("domain_id") @db.Uuid
  url               String             @unique @db.VarChar(500)
  createdAt         DateTime           @default(now()) @map("created_at")
  pageViewEmissions PageViewEmission[]
  pageViews         PageView[]

  @@map("pages")
}

model PageViewEmission {
  id        String     @id @default(uuid()) @db.Uuid
  Page      Page       @relation(fields: [pageId], references: [id])
  pageId    String     @map("page_id") @db.Uuid
  byte      Int        @map("byte")
  createdAt DateTime   @default(now()) @map("created_at")
  pageViews PageView[]

  @@map("page_view_emissions")
}

model PageView {
  id                 String           @id @default(uuid()) @db.Uuid
  page               Page             @relation(fields: [pageId], references: [id])
  pageId             String           @map("page_id") @db.Uuid
  pageViewEmission   PageViewEmission @relation(fields: [pageViewEmissionId], references: [id])
  pageViewEmissionId String           @map("page_view_emission_id") @db.Uuid
  windowWidth        Int?             @map("window_width")
  windowHeight       Int?             @map("window_height")
  connectionType     String?          @map("connection_type") @db.VarChar(20)
  uncachedVisit      Boolean?         @map("uncached_visit")
  byte               Int
  kwh                Int
  createdAt          DateTime         @default(now()) @map("created_at")

  @@map("page_views")
}

model Badge {
  id          String           @id @default(uuid()) @db.Uuid
  domain      Domain           @relation(fields: [domainId], references: [id])
  domainId    String           @map("domain_id") @db.Uuid
  colorscheme BadgeColorscheme @default(COLOR)
  type        BadgeType        @default(DEFAULT)

  @@map("badges")
}

model Offset {
  id              String         @id @default(uuid()) @db.Uuid
  domain          Domain         @relation(fields: [domainId], references: [id])
  domainId        String         @map("domain_id") @db.Uuid
  subscription    Subscription   @relation(fields: [subscriptionId], references: [id])
  subscriptionId  String         @map("subscription_id") @db.Uuid
  from            DateTime
  until           DateTime
  offsetType      OffsetType     @default(CARBON_OFFSET) @map("offset_type")
  offsetKilograms Int            @default(0) @map("offset_kilograms")
  recordedUntil   DateTime?      @map("recorded_until")
  price           Int?
  currency        Currency       @default(EUR)
  purchaseStatus  PurchaseStatus @default(PENDING) @map("purchase_status")
  createdAt       DateTime       @default(now()) @map("created_at")

  @@map("offsets")
}

model Subscription {
  id                       String          @id @default(uuid()) @db.Uuid
  domain                   Domain          @relation(fields: [domainId], references: [id])
  domainId                 String          @map("domain_id") @db.Uuid
  paymentInterval          PaymentInterval @default(MONTHLY) @map("payment_interval")
  offsetType               OffsetType      @map("offset_type")
  stripeCustomerId         String?         @map("stripe_customer_id") @db.VarChar(50)
  stripePriceId            String?         @map("stripe_price_id") @db.VarChar(50)
  stripeSubscriptionId     String?         @map("stripe_subscription_id") @db.VarChar(50)
  stripeSubscriptionItemId String?         @map("stripe_subscription_item_id") @db.VarChar(50)
  currency                 Currency        @default(EUR)
  createdAt                DateTime        @default(now()) @map("created_at")
  validTo                  DateTime        @map("valid_to") // @default(now() + month or year)
  recordedUntil            DateTime?       @map("recorded_until")
  deletedAt                DateTime?       @map("deleted_at")
  offsets                  Offset[]

  @@map("subscriptions")
}

enum Role {
  OWNER
  MANAGER
}

enum OffsetType {
  CARBON_OFFSET
}

enum BadgeType {
  DEFAULT
}

enum BadgeColorscheme {
  COLOR
  COLOR_INVERTED
  SW
  SW_INVERTED
}

enum Currency {
  EUR
  USD
  GBP
  AUD
  CAD
}

enum PaymentInterval {
  MONTHLY
  YEARLY
}

enum PurchaseStatus {
  PENDING
  SUCCESSFULL
  FAILED
}
